import type { RegistrationDataDto } from "../dto/account";
import type { AutoGeneratedFields } from "./types";
import { AuthProvider, type Account, type PrismaClient } from "@prisma/client";

export default class AccountRepository {
    constructor(private prisma: PrismaClient) {}

    private create = (data: Omit<Account, AutoGeneratedFields | "role">) => {
        return this.prisma.account.create({
            data,
        });
    };

    public createLocal = (
        account: RegistrationDataDto,
        passwordHash: string
    ) => {
        return this.create({
            username: account.username,
            email: account.email,
            provider: AuthProvider.local,
            password: passwordHash,
        });
    };

    public createGoogle = (
        account: Omit<RegistrationDataDto, "username" | "password">
    ) => {
        return this.create({
            username: null,
            email: account.email,
            provider: AuthProvider.google,
            password: null,
        });
    };

    public async existsByEmailCaseInsensitive(email: string): Promise<boolean> {
        return !!(await this.prisma.account.findFirst({
            where: {
                email: {
                    equals: email,
                    mode: "insensitive",
                },
            },
        }));
    }

    public findByEmailWhereProviderGoogle = (email: string) => {
        return this.prisma.account.findFirst({
            where: {
                email,
                provider: AuthProvider.google,
                password: null,
            },
        });
    };

    public findByEmailCaseInsensitiveWhereProviderLocal = (email: string) => {
        return this.prisma.account.findFirst({
            where: {
                email: {
                    // TODO: Maybe bad idea to search case insensitive
                    // Instead maybe better idea is to do lowercase() on email before saving it to database
                    equals: email,
                    mode: "insensitive",
                },
                provider: AuthProvider.local,
                NOT: {
                    password: null,
                },
            },
        });
    };

    public findByUsernameWhereProviderLocal = (username: string) => {
        return this.prisma.account.findFirst({
            where: {
                username,
                provider: AuthProvider.local,
                NOT: {
                    password: null,
                },
            },
        });
    };

    public findByUsernameCaseInsensitive = (username: string) => {
        return this.prisma.account.findFirst({
            where: {
                username: {
                    equals: username,
                    mode: "insensitive",
                },
            },
        });
    };
}
